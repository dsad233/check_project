"""v3

Revision ID: 85126e30108c
Revises: 2d6aa8b25a6e
Create Date: 2024-10-29 15:34:22.940016

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = '85126e30108c'
down_revision: Union[str, None] = '2d6aa8b25a6e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def create_table_safe(name: str, *args, **kwargs) -> None:
   try:
       op.create_table(name, *args, **kwargs)
   except Exception as e:
       print(f"{name} 테이블 생성 스킵: {e}")

def create_index_safe(name: str, table: str, columns: list, **kwargs) -> None:
   try:
       op.create_index(name, table, columns, **kwargs)
   except Exception as e:
       print(f"{name} 인덱스 생성 스킵: {e}")

def add_column_safe(table_name: str, column: sa.Column) -> None:
   try:
       op.add_column(table_name, column)
   except Exception as e:
       print(f"{table_name}의 {column.name} 컬럼 추가 스킵: {e}")

def drop_column_safe(table_name: str, column_name: str) -> None:
   try:
       op.drop_column(table_name, column_name)
   except Exception as e:
       print(f"{table_name}의 {column_name} 컬럼 삭제 스킵: {e}")

def upgrade() -> None:
   # ### commands auto generated by Alembic - please adjust! ###
   create_table_safe('parttimer_policies',
       sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
       sa.Column('branch_id', sa.Integer(), nullable=False),
       sa.Column('weekday_base_salary', sa.Boolean(), nullable=True),
       sa.Column('remote_base_salary', sa.Boolean(), nullable=True),
       sa.Column('annual_leave_allowance', sa.Boolean(), nullable=True),
       sa.Column('overtime_allowance', sa.Boolean(), nullable=True),
       sa.Column('holiday_work_allowance', sa.Boolean(), nullable=True),
       sa.Column('created_at', sa.DateTime(), nullable=True),
       sa.Column('updated_at', sa.DateTime(), nullable=True),
       sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
       sa.PrimaryKeyConstraint('id')
   )

   create_table_safe('salary_templates_policies',
       sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
       sa.Column('branch_id', sa.Integer(), nullable=False),
       sa.Column('part_id', sa.Integer(), nullable=False),
       sa.Column('unused_annual_leave_allowance', sa.Boolean(), nullable=True),
       sa.Column('additional_overtime_allowance', sa.Boolean(), nullable=True),
       sa.Column('additional_holiday_allowance', sa.Boolean(), nullable=True),
       sa.Column('annual_leave_deduction', sa.Boolean(), nullable=True),
       sa.Column('attendance_deduction', sa.Boolean(), nullable=True),
       sa.Column('created_at', sa.DateTime(), nullable=True),
       sa.Column('updated_at', sa.DateTime(), nullable=True),
       sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
       sa.ForeignKeyConstraint(['part_id'], ['parts.id'], ),
       sa.PrimaryKeyConstraint('id'),
       sa.UniqueConstraint('part_id')
   )

   create_table_safe('branch_histories',
       sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
       sa.Column('branch_id', sa.Integer(), nullable=False),
       sa.Column('created_by', sa.Integer(), nullable=False),
       sa.Column('snapshot_id', sa.String(length=255), nullable=False),
       sa.Column('history_type', sa.Enum('AUTO_ANNUAL_LEAVE_GRANT', name='branchhistorytype'), nullable=False),
       sa.Column('history', sa.JSON(), nullable=False),
       sa.Column('created_at', sa.DateTime(), nullable=False),
       sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
       sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
       sa.PrimaryKeyConstraint('id')
   )

   create_index_safe('ix_branch_histories_history_type', 'branch_histories', ['history_type'], unique=False)

   add_column_safe('allowance_policies', sa.Column('payment_day', sa.Integer(), nullable=False))
   add_column_safe('allowance_policies', sa.Column('base_salary', sa.Boolean(), nullable=True))
   add_column_safe('users', sa.Column('employment_status', sa.Enum('정규직', '계약직', name='employment_status'), nullable=False))
   drop_column_safe('users', 'is_part_timer')
   add_column_safe('work_contract', sa.Column('weekly_work_end_time', sa.Time(), nullable=False))
   add_column_safe('work_contract', sa.Column('saturday_work_end_time', sa.Time(), nullable=True))
   add_column_safe('work_contract', sa.Column('sunday_work_end_time', sa.Time(), nullable=True))
   drop_column_safe('work_contract', 'is_part_timer')
   drop_column_safe('work_contract', 'weekly_work_hours')
   drop_column_safe('work_contract', 'saturday_work_hours')
   drop_column_safe('work_contract', 'sunday_work_hours')


def downgrade() -> None:
   # ### commands auto generated by Alembic - please adjust! ###
   add_column_safe('work_contract', sa.Column('sunday_work_hours', mysql.INTEGER(), autoincrement=False, nullable=True))
   add_column_safe('work_contract', sa.Column('saturday_work_hours', mysql.INTEGER(), autoincrement=False, nullable=True))
   add_column_safe('work_contract', sa.Column('weekly_work_hours', mysql.INTEGER(), autoincrement=False, nullable=False))
   add_column_safe('work_contract', sa.Column('is_part_timer', mysql.TINYINT(display_width=1), autoincrement=False, nullable=False))
   drop_column_safe('work_contract', 'sunday_work_end_time')
   drop_column_safe('work_contract', 'saturday_work_end_time')
   drop_column_safe('work_contract', 'weekly_work_end_time')
   add_column_safe('users', sa.Column('is_part_timer', mysql.TINYINT(display_width=1), autoincrement=False, nullable=False))
   drop_column_safe('users', 'employment_status')
   drop_column_safe('allowance_policies', 'base_salary')
   drop_column_safe('allowance_policies', 'payment_day')

   try:
       op.drop_index('ix_branch_histories_history_type', table_name='branch_histories')
   except Exception as e:
       print(f"branch_histories 인덱스 삭제 스킵: {e}")

   try:
       op.drop_table('branch_histories')
   except Exception as e:
       print(f"branch_histories 테이블 삭제 스킵: {e}")

   try:
       op.drop_table('salary_templates_policies')
   except Exception as e:
       print(f"salary_templates_policies 테이블 삭제 스킵: {e}")

   try:
       op.drop_table('parttimer_policies')
   except Exception as e:
       print(f"parttimer_policies 테이블 삭제 스킵: {e}")