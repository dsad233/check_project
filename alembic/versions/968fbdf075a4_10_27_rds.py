"""10.27_rds

Revision ID: 968fbdf075a4
Revises: 86f80abd758c
Create Date: 2024-10-27 15:29:46.466598

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '968fbdf075a4'
down_revision: Union[str, None] = '86f80abd758c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('overtime_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('ot_30_total', sa.Integer(), nullable=True),
    sa.Column('ot_60_total', sa.Integer(), nullable=True),
    sa.Column('ot_90_total', sa.Integer(), nullable=True),
    sa.Column('ot_30_money', sa.Integer(), nullable=True),
    sa.Column('ot_60_money', sa.Integer(), nullable=True),
    sa.Column('ot_90_money', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.String(length=1), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_menus',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('part_id', sa.Integer(), nullable=False),
    sa.Column('menu_name', sa.Enum('P.T관리', '계약관리(P.T)포함', '휴무관리', 'O.T관리', '인사관리', '근로관리', '급여정산', '문서설정관리', '휴직관리', '출퇴근기록관리', name='menupermissions'), nullable=False),
    sa.Column('is_permitted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['part_id'], ['parts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_table('user_parts',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('part_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['part_id'], ['parts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_table('user_salaries',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('branch_id', sa.Integer(), nullable=False),
    sa.Column('part_id', sa.Integer(), nullable=False),
    sa.Column('monthly_salary', sa.Float(), nullable=False),
    sa.Column('annual_salary', sa.Float(), nullable=False),
    sa.Column('hourly_wage', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_yn', sa.String(length=1), nullable=True),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['part_id'], ['parts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('work_contract',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('contract_start_date', sa.Date(), nullable=False),
    sa.Column('contract_end_date', sa.Date(), nullable=True),
    sa.Column('is_fixed_rest_day', sa.Boolean(), nullable=False),
    sa.Column('weekly_work_hours', sa.Integer(), nullable=False),
    sa.Column('weekly_work_start_time', sa.Time(), nullable=False),
    sa.Column('weekly_is_rest', sa.Boolean(), nullable=False),
    sa.Column('saturday_work_hours', sa.Integer(), nullable=True),
    sa.Column('saturday_work_start_time', sa.Time(), nullable=True),
    sa.Column('saturday_is_rest', sa.Boolean(), nullable=False),
    sa.Column('sunday_work_hours', sa.Integer(), nullable=True),
    sa.Column('sunday_work_start_time', sa.Time(), nullable=True),
    sa.Column('sunday_is_rest', sa.Boolean(), nullable=False),
    sa.Column('is_part_timer', sa.Boolean(), nullable=False),
    sa.Column('break_start_time', sa.Time(), nullable=True),
    sa.Column('break_end_time', sa.Time(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('fixed_rest_day',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('work_contract_id', sa.Integer(), nullable=False),
    sa.Column('rest_day', sa.Enum('MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY', name='weekday'), nullable=False),
    sa.Column('every_over_week', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['work_contract_id'], ['work_contract.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('fixed_rest_day')
    op.drop_table('work_contract')
    op.drop_table('user_salaries')
    op.drop_table('user_parts')
    op.drop_table('user_menus')
    op.drop_table('overtime_history')
    # ### end Alembic commands ###
