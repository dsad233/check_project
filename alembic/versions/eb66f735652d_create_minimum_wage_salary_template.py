"""create minimum wage, salary template

Revision ID: eb66f735652d
Revises: 2601c093c87e
Create Date: 2024-10-21 21:21:07.528248

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy import table, column, inspect
# revision identifiers, used by Alembic.
revision: str = 'eb66f735652d'
down_revision: Union[str, None] = '2601c093c87e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    inspector = inspect(conn)
    # ### commands auto generated by Alembic - please adjust! ###
    if 'menu_permissions' not in inspector.get_table_names():
        op.create_table('menu_permissions',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.Enum('P.T관리', '계약관리(P.T)포함', '휴무관리', 'O.T관리', '인사관리', '근로관리', '급여정산', '문서설정관리', '휴직관리', '출퇴근기록관리'), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('deleted_yn', sa.String(length=1), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
        )
    if 'minimum_wage_policies' not in inspector.get_table_names():
        op.create_table('minimum_wage_policies',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('minimum_wage', sa.Integer(), nullable=False),
        sa.Column('person_in_charge', sa.String(length=255), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('deleted_yn', sa.String(length=1), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
    if 'roles' not in inspector.get_table_names():
        op.create_table('roles',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('role', sa.Enum('MSO 최고권한', '최고관리자', '통합관리자', '관리자', '사원', '퇴사자', '휴직자'), nullable=False),
        sa.Column('description', sa.String(length=500), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('deleted_yn', sa.String(length=1), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('role')
        )
        roles_table = table('roles',
            column('role', sa.Enum('MSO 최고권한', '최고관리자', '통합관리자', '관리자', '사원', '퇴사자', '휴직자')),
            column('description', sa.String(500))
        )

        op.bulk_insert(roles_table, [
            {'role': 'MSO 최고권한', 'description': 'MSO 최고 권한을 가진 사용자'},
            {'role': '최고관리자', 'description': '최고 관리자 권한을 가진 사용자'},
            {'role': '통합관리자', 'description': '통합 관리자 권한을 가진 사용자'},
            {'role': '관리자', 'description': '일반 관리자 권한을 가진 사용자'},
            {'role': '사원', 'description': '일반 사원'},
            {'role': '퇴사자', 'description': '퇴사한 사용자'},
            {'role': '휴직자', 'description': '휴직 중인 사용자'}
        ])
    if 'salary_templates' not in inspector.get_table_names():
        op.create_table('salary_templates',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('branch_id', sa.Integer(), nullable=False),
        sa.Column('part_id', sa.Integer(), nullable=False),
        sa.Column('part_name', sa.String(length=255), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('is_january_entry', sa.Boolean(), nullable=False),
        sa.Column('weekly_work_days', sa.Integer(), nullable=False),
        sa.Column('month_salary', sa.Integer(), nullable=False),
        sa.Column('included_holiday_allowance', sa.Boolean(), nullable=False),
        sa.Column('included_job_allowance', sa.Boolean(), nullable=False),
        sa.Column('hour_wage', sa.Integer(), nullable=False),
        sa.Column('basic_salary', sa.Integer(), nullable=False),
        sa.Column('contractual_working_hours', sa.Integer(), nullable=False),
        sa.Column('weekly_rest_hours', sa.Integer(), nullable=False),
        sa.Column('annual_salary', sa.Integer(), nullable=False),
        sa.Column('comprehensive_overtime_allowance', sa.Integer(), nullable=False),
        sa.Column('comprehensive_overtime_hour', sa.Integer(), nullable=False),
        sa.Column('annual_leave_allowance', sa.Integer(), nullable=False),
        sa.Column('annual_leave_allowance_hour', sa.Integer(), nullable=False),
        sa.Column('annual_leave_allowance_day', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('deleted_yn', sa.String(length=1), nullable=True),
        sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
        sa.ForeignKeyConstraint(['part_id'], ['parts.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    if 'user_part_menu_permissions' not in inspector.get_table_names():
        op.create_table('user_part_menu_permissions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('part_id', sa.Integer(), nullable=False),
        sa.Column('menu_permission_id', sa.Integer(), nullable=False),
        sa.Column('is_permitted', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('deleted_yn', sa.String(length=1), nullable=True),
        sa.ForeignKeyConstraint(['menu_permission_id'], ['menu_permissions.id'], ),
        sa.ForeignKeyConstraint(['part_id'], ['parts.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    if 'user_parts' not in inspector.get_table_names():
        op.create_table('user_parts',
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('part_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['part_id'], ['parts.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
        )

    existing_fks = inspector.get_foreign_keys('users')
    for fk in existing_fks:
        if fk['name'] == 'users_ibfk_2':
            op.drop_constraint('users_ibfk_2', 'users', type_='foreignkey')
    user_columns = [col['name'] for col in inspector.get_columns('users')]
    if 'leave_date' not in user_columns:
        op.add_column('users', sa.Column('leave_date', sa.Date(), nullable=True))
    if not any(fk['name'] == 'users_ibfk_2' for fk in inspector.get_foreign_keys('users')):
            op.create_foreign_key(
                "users_roles_fk",  # 새로운 이름 사용
                'users',
                'roles',
                ['role'],
                ['role']
            )
    if 'part_id' in user_columns:
        op.drop_column('users', 'part_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = inspect(conn)
    
    def safe_drop_constraint(table_name):
        """테이블의 외래 키 제약조건들을 안전하게 제거"""
        try:
            constraints = inspector.get_foreign_keys(table_name)
            for fk in constraints:
                try:
                    op.drop_constraint(
                        fk['name'],
                        table_name,
                        type_='foreignkey'
                    )
                except Exception as e:
                    print(f"Warning: Could not drop constraint {fk['name']}: {e}")
        except Exception as e:
            print(f"Warning: Error handling constraints for {table_name}: {e}")

    # 1. users 테이블의 외래 키 제약조건 제거
    safe_drop_constraint('users')

    # 2. part_id 컬럼 추가
    columns = [col['name'] for col in inspector.get_columns('users')]
    if 'part_id' not in columns:
        op.add_column('users', sa.Column('part_id', mysql.INTEGER(), nullable=False))

    # 3. leave_date 컬럼 제거
    if 'leave_date' in columns:
        op.drop_column('users', 'leave_date')

    # 4. 의존성 있는 테이블의 외래 키 제거
    dependent_tables = [
        'user_parts',
        'user_part_menu_permissions',
        'salary_templates'
    ]
    
    for table in dependent_tables:
        if table in inspector.get_table_names():
            safe_drop_constraint(table)

    # 5. 테이블 삭제
    tables = [
        'user_parts',
        'user_part_menu_permissions',
        'salary_templates',
        'roles',
        'minimum_wage_policies',
        'menu_permissions'
    ]
    
    for table in tables:
        if table in inspector.get_table_names():
            op.drop_table(table)

    # 6. parts 테이블과의 외래 키 생성
    op.create_foreign_key(
        'users_ibfk_2',
        'users',
        'parts',
        ['part_id'],
        ['id']
    )
    # ### end Alembic commands ###