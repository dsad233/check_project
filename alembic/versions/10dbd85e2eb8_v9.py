"""v9

Revision ID: 10dbd85e2eb8
Revises: f135e242650d
Create Date: 2024-11-01 16:30:15.660403

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy import DateTime

# revision identifiers, used by Alembic.
revision: str = '10dbd85e2eb8'
down_revision: Union[str, None] = 'f135e242650d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('connection_logs',
    # sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    # sa.Column('connection_count', sa.Integer(), nullable=False),
    # sa.Column('created_at', DateTime(timezone=True), nullable=False),
    # sa.PrimaryKeyConstraint('id')
    # )
    # op.create_index(op.f('ix_connection_logs_id'), 'connection_logs', ['id'], unique=False)
    ###################

    # null 가능으로 컬럼 추가
    # op.add_column('leave_histories', sa.Column('part_id', sa.Integer(), nullable=True))
    # 기존 데이터에 대해 partid 3을 준다
    # op.execute('UPDATE leave_histories SET part_id = 3')
    # alter_column 대신 직접 SQL 실행
    # op.execute('ALTER TABLE leave_histories MODIFY part_id INT NOT NULL;')

    # op.create_unique_constraint('uq_user_application_date', 'leave_histories', ['user_id', 'application_date'])
    # op.create_foreign_key(None, 'leave_histories', 'parts', ['part_id'], ['id'])

    # null 가능으로 추가해서, 값 넣고, 다시 null 불가로 변경
    # op.add_column('user_leaves_days', sa.Column('part_id', sa.Integer(), nullable=True))
    # op.execute('UPDATE user_leaves_days SET part_id = 3')
    # alter_column 대신 직접 SQL 실행
    # op.execute('ALTER TABLE user_leaves_days MODIFY part_id INT NOT NULL;')

    # 1. 먼저 기존의 모든 관련 제약조건 삭제
    op.drop_index('user_leaves_days_ibfk_1', table_name='user_leaves_days')
    op.drop_constraint('user_leaves_days_ibfk_4', 'user_leaves_days', type_='foreignkey')
    op.drop_constraint('user_leaves_days_ibfk_6', 'user_leaves_days', type_='foreignkey')  # branch_id 관련 FK

    # 2. 이제 branch_id 수정 가능
    op.execute('ALTER TABLE user_leaves_days MODIFY branch_id INT NOT NULL;')

    # 3. part_id 관련 외래 키 생성
    op.create_foreign_key(None, 'user_leaves_days', 'parts', ['part_id'], ['id'])

    # 4. branch_id 관련 외래 키 재생성
    op.create_foreign_key(
        'user_leaves_days_branches_fk',  # 새로운 이름으로 생성
        'user_leaves_days',
        'branches',
        ['branch_id'],
        ['id']
    )

    # 5. 마지막으로 불필요한 컬럼 삭제
    op.drop_column('user_leaves_days', 'approver_id')
    op.drop_column('user_leaves_days', 'leave_history_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_leaves_days', sa.Column('leave_history_id', mysql.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_leaves_days', sa.Column('approver_id', mysql.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'user_leaves_days', type_='foreignkey')
    op.create_foreign_key('user_leaves_days_ibfk_4', 'user_leaves_days', 'leave_histories', ['leave_history_id'], ['id'])
    op.create_index('user_leaves_days_ibfk_1', 'user_leaves_days', ['approver_id'], unique=False)
    op.alter_column('user_leaves_days', 'branch_id',
               existing_type=mysql.INTEGER(),
               nullable=True)
    op.drop_column('user_leaves_days', 'part_id')
    op.drop_constraint(None, 'leave_histories', type_='foreignkey')
    op.drop_constraint('uq_user_application_date', 'leave_histories', type_='unique')
    op.drop_column('leave_histories', 'part_id')
    op.drop_index(op.f('ix_connection_logs_id'), table_name='connection_logs')
    op.drop_table('connection_logs')
    # ### end Alembic commands ###
